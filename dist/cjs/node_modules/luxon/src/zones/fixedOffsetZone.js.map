{"version":3,"file":"fixedOffsetZone.js","sources":["../../../../../../node_modules/luxon/src/zones/fixedOffsetZone.js"],"sourcesContent":["import { formatOffset, signedOffset } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\nexport default class FixedOffsetZone extends Zone {\n  /**\n   * Get a singleton instance of UTC\n   * @return {FixedOffsetZone}\n   */\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone}\n   */\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    /** @private **/\n    this.fixed = offset;\n  }\n\n  /** @override **/\n  get type() {\n    return \"fixed\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\n  }\n\n  get ianaName() {\n    if (this.fixed === 0) {\n      return \"Etc/UTC\";\n    } else {\n      return `Etc/GMT${formatOffset(-this.fixed, \"narrow\")}`;\n    }\n  }\n\n  /** @override **/\n  offsetName() {\n    return this.name;\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return true;\n  }\n\n  /** @override **/\n  offset() {\n    return this.fixed;\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n"],"names":["singleton","FixedOffsetZone","Zone","utcInstance","static","offset","s","r","match","signedOffset","constructor","super","this","fixed","type","name","formatOffset","ianaName","offsetName","ts","format","isUniversal","equals","otherZone","isValid"],"mappings":"sEAGA,IAAIA,EAAY,KAMD,MAAMC,UAAwBC,EAKhCC,yBAIT,OAHkB,OAAdH,IACFA,EAAY,IAAIC,EAAgB,IAE3BD,CACR,CAODI,gBAAgBC,GACd,OAAkB,IAAXA,EAAeJ,EAAgBE,YAAc,IAAIF,EAAgBI,EACzE,CAUDD,sBAAsBE,GACpB,GAAIA,EAAG,CACL,MAAMC,EAAID,EAAEE,MAAM,yCAClB,GAAID,EACF,OAAO,IAAIN,EAAgBQ,EAAAA,aAAaF,EAAE,GAAIA,EAAE,IAEnD,CACD,OAAO,IACR,CAEDG,YAAYL,GACVM,QAEAC,KAAKC,MAAQR,CACd,CAGGS,WACF,MAAO,OACR,CAGGC,WACF,OAAsB,IAAfH,KAAKC,MAAc,MAAQ,MAAMG,EAAYA,aAACJ,KAAKC,MAAO,WAClE,CAEGI,eACF,OAAmB,IAAfL,KAAKC,MACA,UAEA,UAAUG,gBAAcJ,KAAKC,MAAO,WAE9C,CAGDK,aACE,OAAON,KAAKG,IACb,CAGDC,aAAaG,EAAIC,GACf,OAAOJ,eAAaJ,KAAKC,MAAOO,EACjC,CAGGC,kBACF,OAAO,CACR,CAGDhB,SACE,OAAOO,KAAKC,KACb,CAGDS,OAAOC,GACL,MAA0B,UAAnBA,EAAUT,MAAoBS,EAAUV,QAAUD,KAAKC,KAC/D,CAGGW,cACF,OAAO,CACR"}