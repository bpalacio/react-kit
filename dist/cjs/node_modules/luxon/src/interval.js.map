{"version":3,"file":"interval.js","sources":["../../../../../node_modules/luxon/src/interval.js"],"sourcesContent":["import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport * as Formats from \"./impl/formats.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd,\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter((d) => this.contains(d))\n        .sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits((x) => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals\n      .sort((a, b) => a.s - b.s)\n      .reduce(\n        ([sofar, current], item) => {\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        },\n        [[], null]\n      );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map((i) => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" },\n      ]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map((i) => this.intersection(i))\n      .filter((i) => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns a localized string representing this Interval. Accepts the same options as the\n   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as\n   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method\n   * is browser-specific, but in general it will return an appropriate representation of the\n   * Interval in the assigned locale. Defaults to the system's locale if no locale has been\n   * specified.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or\n   * Intl.DateTimeFormat constructor options.\n   * @param {Object} opts - Options to override the configuration of the start DateTime.\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p\n   * @return {string}\n   */\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format\n   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible\n   * formatting tool.\n   * @param {string} dateFormat - The format string. This string formats the start and end time.\n   * See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - Options.\n   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end\n   * representations.\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n"],"names":["INVALID","Interval","constructor","config","this","s","start","e","end","invalid","isLuxonInterval","static","reason","explanation","InvalidArgumentError","Invalid","Settings","throwOnInvalid","InvalidIntervalError","builtStart","friendlyDateTime","builtEnd","validateError","isValid","toISO","validateStartEnd","duration","dur","Duration","fromDurationLike","dt","fromDateTimes","plus","minus","text","opts","split","startIsValid","endIsValid","DateTime","fromISO","default","after","before","o","invalidReason","invalidExplanation","length","unit","toDuration","get","NaN","count","startOf","Math","floor","diff","hasSame","isEmpty","valueOf","isAfter","dateTime","isBefore","contains","set","splitAt","dateTimes","sorted","map","filter","d","sort","results","i","added","next","push","splitBy","as","idx","mapUnits","x","divideEqually","numberOfParts","slice","overlaps","other","abutsStart","abutsEnd","engulfs","equals","intersection","union","intervals","found","final","a","b","reduce","sofar","current","item","concat","currentCount","ends","time","type","arr","Array","prototype","merge","difference","xor","toString","toLocaleString","formatOpts","Formats.DATE_SHORT","Formatter","create","loc","clone","formatInterval","toISODate","toISOTime","toFormat","dateFormat","separator","mapEndpoints","mapFn"],"mappings":"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"}