{"version":3,"file":"formatter.js","sources":["../../../../../../node_modules/luxon/src/impl/formatter.js"],"sourcesContent":["import * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS,\n};\n\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = \"\",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.formatToParts();\n  }\n\n  formatInterval(interval, opts = {}) {\n    const df = this.loc.dtFormatter(interval.start, { ...this.opts, ...opts });\n    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = { ...this.opts };\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n      string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = (opts) => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: \"numeric\", hourCycle: \"h12\" }, \"dayperiod\"),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" },\n              \"weekday\"\n            ),\n      maybeMacro = (token) => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = (length) =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"),\n      tokenToString = (token) => {\n        // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // fractional seconds\n          case \"uu\":\n            return this.num(Math.floor(dt.millisecond / 10), 2);\n          case \"uuu\":\n            return this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({ format: \"narrow\", allowZ: this.opts.allowZ });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({ format: \"short\", allowZ: this.opts.allowZ });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({ format: \"techie\", allowZ: this.opts.allowZ });\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, { format: \"short\", locale: this.loc.locale });\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, { format: \"long\", locale: this.loc.locale });\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter\n              ? string({ year: \"2-digit\" }, \"year\")\n              : this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = (token) => {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"w\":\n            return \"week\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = (lildur) => (token) => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n"],"names":["stringifyTokens","splits","tokenToString","s","token","literal","val","macroTokenToFormatOpts","D","Formats.DATE_SHORT","DATE_SHORT","DD","Formats.DATE_MED","DATE_MED","DDD","Formats.DATE_FULL","DATE_FULL","DDDD","Formats.DATE_HUGE","DATE_HUGE","t","Formats.TIME_SIMPLE","TIME_SIMPLE","tt","Formats.TIME_WITH_SECONDS","TIME_WITH_SECONDS","ttt","Formats.TIME_WITH_SHORT_OFFSET","TIME_WITH_SHORT_OFFSET","tttt","Formats.TIME_WITH_LONG_OFFSET","TIME_WITH_LONG_OFFSET","T","Formats.TIME_24_SIMPLE","TIME_24_SIMPLE","TT","Formats.TIME_24_WITH_SECONDS","TIME_24_WITH_SECONDS","TTT","Formats.TIME_24_WITH_SHORT_OFFSET","TIME_24_WITH_SHORT_OFFSET","TTTT","Formats.TIME_24_WITH_LONG_OFFSET","TIME_24_WITH_LONG_OFFSET","f","Formats.DATETIME_SHORT","DATETIME_SHORT","ff","Formats.DATETIME_MED","DATETIME_MED","fff","Formats.DATETIME_FULL","DATETIME_FULL","ffff","Formats.DATETIME_HUGE","DATETIME_HUGE","F","Formats.DATETIME_SHORT_WITH_SECONDS","DATETIME_SHORT_WITH_SECONDS","FF","Formats.DATETIME_MED_WITH_SECONDS","DATETIME_MED_WITH_SECONDS","FFF","Formats.DATETIME_FULL_WITH_SECONDS","DATETIME_FULL_WITH_SECONDS","FFFF","Formats.DATETIME_HUGE_WITH_SECONDS","DATETIME_HUGE_WITH_SECONDS","Formatter","static","locale","opts","fmt","current","currentFull","bracketed","i","length","c","charAt","push","constructor","formatOpts","this","loc","systemLoc","formatWithSystemDefault","dt","redefaultToSystem","dtFormatter","format","formatDateTime","formatDateTimeParts","formatToParts","formatInterval","interval","start","dtf","formatRange","toJSDate","end","resolvedOptions","num","n","p","forceSimple","padStart","padTo","numberFormatter","formatDateTimeFromString","knownEnglish","listingMode","useDateTimeFormatter","outputCalendar","string","extract","formatOffset","isOffsetFixed","offset","allowZ","isValid","zone","ts","month","standalone","English.monthForDateTime","monthForDateTime","day","weekday","English.weekdayForDateTime","weekdayForDateTime","maybeMacro","era","English.eraForDateTime","parseFormat","millisecond","second","Math","floor","minute","hour","offsetName","zoneName","English.meridiemForDateTime","hourCycle","year","toString","slice","weekYear","weekNumber","ordinal","quarter","formatDurationFromString","dur","tokenToField","tokens","realTokens","reduce","found","concat","lildur","mapped","get","shiftTo","map","filter"],"mappings":"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"}