{"version":3,"file":"zone.js","sources":["../../../../../node_modules/luxon/src/zone.js"],"sourcesContent":["import { ZoneIsAbstractError } from \"./errors.js\";\n\n/**\n * @interface\n */\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  get ianaName() {\n    return this.name;\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get isUniversal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n"],"names":["type","ZoneIsAbstractError","name","ianaName","this","isUniversal","offsetName","ts","opts","formatOffset","format","offset","equals","otherZone","isValid"],"mappings":"yDAKe,MAMTA,WACF,MAAM,IAAIC,EAAmBA,mBAC9B,CAOGC,WACF,MAAM,IAAID,EAAmBA,mBAC9B,CAEGE,eACF,OAAOC,KAAKF,IACb,CAOGG,kBACF,MAAM,IAAIJ,EAAmBA,mBAC9B,CAWDK,WAAWC,EAAIC,GACb,MAAM,IAAIP,EAAmBA,mBAC9B,CAUDQ,aAAaF,EAAIG,GACf,MAAM,IAAIT,EAAmBA,mBAC9B,CAQDU,OAAOJ,GACL,MAAM,IAAIN,EAAmBA,mBAC9B,CAQDW,OAAOC,GACL,MAAM,IAAIZ,EAAmBA,mBAC9B,CAOGa,cACF,MAAM,IAAIb,EAAmBA,mBAC9B"}