{"version":3,"file":"index.esm.js","sources":["../../../../../../node_modules/@chakra-ui/breakpoint-utils/dist/index.esm.js"],"sourcesContent":["// ../shared-utils/src/index.ts\nfunction isObject(value) {\n  const type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !Array.isArray(value);\n}\n\n// src/responsive.ts\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null);\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys2 = Object.keys(obj);\n  return keys2.length > 0 && keys2.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\n// src/breakpoint.ts\nfunction getLastItem(array) {\n  const length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : void 0;\n}\nfunction analyzeCSSValue(value) {\n  const num = parseFloat(value.toString());\n  const unit = value.toString().replace(String(num), \"\");\n  return { unitless: !unit, value: num, unit };\n}\nfunction px(value) {\n  if (value == null)\n    return value;\n  const { unitless } = analyzeCSSValue(value);\n  return unitless || typeof value === \"number\" ? `${value}px` : value;\n}\nvar sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\nvar sortBps = (breakpoints2) => Object.fromEntries(Object.entries(breakpoints2).sort(sortByBreakpointValue));\nfunction normalize(breakpoints2) {\n  const sorted = sortBps(breakpoints2);\n  return Object.assign(Object.values(sorted), sorted);\n}\nfunction keys(breakpoints2) {\n  const value = Object.keys(sortBps(breakpoints2));\n  return new Set(value);\n}\nfunction subtract(value) {\n  if (!value)\n    return value;\n  value = px(value) ?? value;\n  const factor = value.endsWith(\"px\") ? -1 : -0.0625;\n  return typeof value === \"number\" ? `${value + factor}` : value.replace(/(\\d+\\.?\\d*)/u, (m) => `${parseFloat(m) + factor}`);\n}\nfunction toMediaQueryString(min, max) {\n  const query = [\"@media screen\"];\n  if (min)\n    query.push(\"and\", `(min-width: ${px(min)})`);\n  if (max)\n    query.push(\"and\", `(max-width: ${px(max)})`);\n  return query.join(\" \");\n}\nfunction analyzeBreakpoints(breakpoints2) {\n  if (!breakpoints2)\n    return null;\n  breakpoints2.base = breakpoints2.base ?? \"0px\";\n  const normalized = normalize(breakpoints2);\n  const queries = Object.entries(breakpoints2).sort(sortByBreakpointValue).map(([breakpoint, minW], index, entry) => {\n    let [, maxW] = entry[index + 1] ?? [];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : void 0;\n    return {\n      _minW: subtract(minW),\n      breakpoint,\n      minW,\n      maxW,\n      maxWQuery: toMediaQueryString(null, maxW),\n      minWQuery: toMediaQueryString(minW),\n      minMaxQuery: toMediaQueryString(minW, maxW)\n    };\n  });\n  const _keys = keys(breakpoints2);\n  const _keysArr = Array.from(_keys.values());\n  return {\n    keys: _keys,\n    normalized,\n    isResponsive(test) {\n      const keys2 = Object.keys(test);\n      return keys2.length > 0 && keys2.every((key) => _keys.has(key));\n    },\n    asObject: sortBps(breakpoints2),\n    asArray: normalize(breakpoints2),\n    details: queries,\n    media: [\n      null,\n      ...normalized.map((minW) => toMediaQueryString(minW)).slice(1)\n    ],\n    toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n      const result = _keysArr.map((bp) => test[bp] ?? null);\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n      return result;\n    },\n    toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n      return test.reduce((acc, value, index) => {\n        const key = _keysArr[index];\n        if (key != null && value != null)\n          acc[key] = value;\n        return acc;\n      }, {});\n    }\n  };\n}\nexport {\n  analyzeBreakpoints,\n  arrayToObjectNotation,\n  breakpoints,\n  isCustomBreakpoint,\n  isResponsiveObjectLike,\n  mapResponsive,\n  objectToArrayNotation,\n  px,\n  toMediaQueryString\n};\n"],"names":["prop","mapper","Array","isArray","map","item","value","type","isObject","Object","keys","reduce","result","key"],"mappings":"mCAeA,SAAuBA,EAAMC,GAC3B,OAAIC,MAAMC,QAAQH,GACTA,EAAKI,KAAKC,GAAkB,OAATA,EAAgB,KAAOJ,EAAOI,KAhB5D,SAAkBC,GAChB,MAAMC,SAAcD,EACpB,OAAgB,MAATA,IAA2B,WAATC,GAA8B,aAATA,KAAyBL,MAAMC,QAAQG,EACvF,CAeME,CAASR,GACJS,OAAOC,KAAKV,GAAMW,QAAO,CAACC,EAAQC,KACvCD,EAAOC,GAAOZ,EAAOD,EAAKa,IACnBD,IACN,CAAE,GAEK,MAARZ,EACKC,EAAOD,GAET,IACT"}