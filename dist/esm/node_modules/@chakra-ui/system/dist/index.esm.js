import e,{r}from"../../../../_virtual/index2.js";import{useColorMode as t}from"../../color-mode/dist/index.esm.js";export{ColorModeContext}from"../../color-mode/dist/index.esm.js";import{resolveStyleConfig as o,propNames as s,isStyleProp as n,css as i}from"../../styled-system/dist/index.esm.js";export{background,border,calc,color,effect,filter,flexbox,getCss,grid,interactivity,layout,list,omitThemingProps,others,position,pseudoPropNames,pseudoSelectors,ring,scroll,space,systemProps,textDecoration,tokenToCSSVar,transform,transition,typography}from"../../styled-system/dist/index.esm.js";import{createContext as a}from"../../react-utils/dist/index.esm.js";import{memoizedGet as u,filterUndefined as l,omit as m,objectFilter as d,runIfFn as c}from"../../utils/dist/index.esm.js";import f from"../../../@emotion/styled/dist/emotion-styled.esm.js";import p from"../../../react-fast-compare/index.js";import{T as y}from"../../../@emotion/react/dist/emotion-element-3838ba9e.esm.js";import h from"../../../lodash.mergewith/index.js";function x(){const e=r.useContext(y);if(!e)throw Error("useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`");return e}function v(){return{...t(),theme:x()}}function S(e,r,t){const o=Array.isArray(r)?r:[r],s=Array.isArray(t)?t:[t];return t=>{const n=s.filter(Boolean),i=o.map(((r,o)=>{if("breakpoints"===e)return function(e,r,t){if(null==r)return r;const o=r=>{var t,o;return null==(o=null==(t=e.__breakpoints)?void 0:t.asArray)?void 0:o[r]};return o(r)??o(t)??t}(t,r,n[o]??r);return function(e,r,t){if(null==r)return r;const o=r=>{var t,o;return null==(o=null==(t=e.__cssMap)?void 0:t[r])?void 0:o.value};return o(r)??o(t)??t}(t,`${e}.${r}`,n[o]??r)}));return Array.isArray(r)?i:i[0]}}a({name:"StylesContext",errorMessage:"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "});var g=new Set([...s,"textStyle","layerStyle","apply","noOfLines","focusBorderColor","errorBorderColor","as","__css","css","sx"]),j=new Set(["htmlWidth","htmlHeight","htmlSize"]);function w(e){return j.has(e)||!g.has(e)}var b=({baseStyle:e})=>r=>{const{theme:t,css:o,__css:s,sx:a,...u}=r,m=d(u,((e,r)=>n(r))),f=c(e,r),p=Object.assign({},s,f,l(m),a),y=i(p)(r.theme);return o?[y,o]:y};function C(r,o){const{baseStyle:s,...n}=o??{};n.shouldForwardProp||(n.shouldForwardProp=w);const i=b({baseStyle:s}),a=f(r,n)(i);return e.forwardRef((function(r,o){const{colorMode:s,forced:n}=t();return e.createElement(a,{ref:o,"data-theme":n?s:void 0,...r})}))}function P(e){return r.forwardRef(e)}function _(e,t={}){const{styleConfig:s,...n}=t,{theme:i,colorMode:a}=v(),d=e?u(i,`components.${e}`):void 0,c=s||d,f=h({theme:i,colorMode:a},(null==c?void 0:c.defaultProps)??{},l(m(n,["children"]))),y=r.useRef({});if(c){const e=o(c)(f);p(y.current,e)||(y.current=e)}return y.current}function A(e,r={}){return _(e,r)}function M(e,r={}){return _(e,r)}var k=function(){const e=new Map;return new Proxy(C,{apply:(e,r,t)=>C(...t),get:(r,t)=>(e.has(t)||e.set(t,C(t)),e.get(t))})}();export{k as chakra,i as css,P as forwardRef,S as getToken,n as isStyleProp,s as propNames,o as resolveStyleConfig,w as shouldForwardProp,C as styled,b as toCSSObject,v as useChakra,t as useColorMode,M as useMultiStyleConfig,A as useStyleConfig,x as useTheme};
//# sourceMappingURL=index.esm.js.map
