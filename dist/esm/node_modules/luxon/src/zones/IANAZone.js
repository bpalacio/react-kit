import{parseZoneInfo as t,formatOffset as e,objToLocalTS as r,isUndefined as n}from"../impl/util.js";import a from"../zone.js";let i={};const o={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};let s={};class m extends a{static create(t){return s[t]||(s[t]=new m(t)),s[t]}static resetCache(){s={},i={}}static isValidSpecifier(t){return this.isValidZone(t)}static isValidZone(t){if(!t)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:t}).format(),!0}catch(t){return!1}}constructor(t){super(),this.zoneName=t,this.valid=m.isValidZone(t)}get type(){return"iana"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(e,{format:r,locale:n}){return t(e,r,n,this.name)}formatOffset(t,r){return e(this.offset(t),r)}offset(t){const e=new Date(t);if(isNaN(e))return NaN;const a=(s=this.name,i[s]||(i[s]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:s,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})),i[s]);var s;let[m,u,c,d,l,f,h]=a.formatToParts?function(t,e){const r=t.formatToParts(e),a=[];for(let t=0;t<r.length;t++){const{type:e,value:i}=r[t],s=o[e];"era"===e?a[s]=i:n(s)||(a[s]=parseInt(i,10))}return a}(a,e):function(t,e){const r=t.format(e).replace(/\u200E/g,""),n=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(r),[,a,i,o,s,m,u,c]=n;return[o,a,i,s,m,u,c]}(a,e);"BC"===d&&(m=1-Math.abs(m));let g=+e;const p=g%1e3;return g-=p>=0?p:1e3+p,(r({year:m,month:u,day:c,hour:24===l?0:l,minute:f,second:h,millisecond:0})-g)/6e4}equals(t){return"iana"===t.type&&t.name===this.name}get isValid(){return this.valid}}export{m as default};
//# sourceMappingURL=IANAZone.js.map
